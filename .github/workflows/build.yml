name: Build, Compile & Package

on:
  workflow_dispatch:
    secrets:
      GITHUB_TOKEN:
        required: true

    inputs:
      SOURCE_CODE_URL:
        description: Source Repo URL
        required: true
        default: https://github.com/retifrav/cmake-cpack-example
      SOURCE_CODE_BRANCH:
        description: Source Repo Branch
        required: true
        default: master
      DOCKER_OS_IMAGE:
        description: Docker Image Operating System
        required: true
        type: string
        default: ubuntu:latest
      DOCKER_IMG_NAME:
        description: Compiling Container Name
        required: true
        type: string
        default: cmake-cpack-example
      DOCKER_TAG:
        description: Compiling Container Tag Name
        required: true
        type: string
        default: latest
      DOCKER_CMAKE_VERSION:
        description: Container CMake Version
        required: true
        default: 3.29.6
      CMAKE_FLAGS:
        description: Additional make flags for compiler (Optional)
        required: false
        type: string
        default: -DCMAKE_BUILD_TYPE=Release
      DOCKER_REPO_HOST:
        description: Hostname/IP & Port of Docker Repo to push too
        required: false
        type: string
        default: 127.0.0.1:5000

jobs:
  build:

    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set version control variables
        run: |
          echo "Setting version control variables..."
          echo "WORK_WEEK=$(date "+%yww%W.%u")" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(str="${{ github.sha }}"; echo "${str:0:7}")" >> $GITHUB_ENV
          echo "SHA=${{ github.sha }}" >> $GITHUB_ENV
          echo "REPO_URL=${{ github.event.inputs.SOURCE_CODE_URL }}" >> $GITHUB_ENV
          echo "REPO_NAME=$(url="${{ github.event.inputs.SOURCE_CODE_URL }}"; repo=${url##*/}; echo "$repo")" >> $GITHUB_ENV
          echo "REPO_BRANCH=${{ github.event.inputs.SOURCE_CODE_BRANCH }}" >> $GITHUB_ENV
          echo "REPO_CHECKOUT=$(url="${{ github.event.inputs.SOURCE_CODE_URL }}"; url=${url#https://github.com/}; echo "${url%/}")" >> $GITHUB_ENV
      - name: Set CMake variables
        run: |
          echo "Setting CMake variables..."
          echo "CMAKE_VERSION=${{ github.event.inputs.DOCKER_CMAKE_VERSION }}" >> $GITHUB_ENV
          echo "CMAKE_FLAGS=${{ github.event.inputs.CMAKE_FLAGS }}" >> $GITHUB_ENV
      - name: Set docker related variables
        run: |
          echo "Setting docker related variables..."
          echo "DOCKER_OS_IMAGE=${{ github.event.inputs.DOCKER_OS_IMAGE }}" >> $GITHUB_ENV
          echo "DOCKER_IMG_NAME=${{ github.event.inputs.DOCKER_IMG_NAME }}" >> $GITHUB_ENV
          echo "DOCKER_TAG=${{ github.event.inputs.DOCKER_TAG }}" >> $GITHUB_ENV
          echo "DOCKER_REPO_HOST=${{ github.event.inputs.DOCKER_REPO_HOST }}" >> $GITHUB_ENV
          echo "DOCKER_ID=$(docker container ls --filter "ancestor=${{ env.DOCKER_IMG_NAME }}:${{ env.DOCKER_TAG }}" --format "{{.ID}}")" >> $GITHUB_ENV
          echo "DOCKER_SOURCE_IMG=$(echo "${{ env.REPO_NAME }}-${{ env.REPO_BRANCH }}-source-cmake.${{ env.CMAKE_VERSION }}:${{ env.COMMIT_HASH }}")" >> $GITHUB_ENV
          echo "DOCKER_SOURCE_COMMIT_IMG=$(echo "${{ env.REPO_NAME }}-${{ env.REPO_BRANCH }}-source_${{ env.COMMIT_HASH }}:${{ env.WORK_WEEK }}")" >> $GITHUB_ENV
          echo "DOCKER_COMPILED_COMMIT_IMG=$(echo "${{ env.REPO_NAME }}-${{ env.REPO_BRANCH }}-compiled_${{ env.WORK_WEEK }}_${{ env.COMMIT_HASH }}:${{ env.DOCKER_TAG }}")" >> $GITHUB_ENV
      - name: Create a TIMESTAMP with WORK_WEEK & COMMIT_HASH variables
        run: |
          echo "TIMESTAMP=${{ env.WORK_WEEK }}_${{ env.COMMIT_HASH }}" >> $GITHUB_ENV
          echo "example: 24ww25.5_59726b5"
      - name: Attach TIMESTAMP to REPO_NAME
        run: |
          echo "REPO_NAME_TIMESTAMP=${{ env.REPO_NAME }}-${{ env.REPO_BRANCH }}_${{ env.TIMESTAMP }}" >> $GITHUB_ENV
          echo "example: c-example-main_24ww24.5_59726b5"
      - name: Set the working directory for ${{ env.REPO_CHECKOUT }}
        run: |
          echo "REPO_PWD=${{ github.workspace }}/${{ env.REPO_NAME }}" >> $GITHUB_ENV


      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Checkout ${{ env.REPO_CHECKOUT }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_CHECKOUT }}
          ref: ${{ env.REPO_BRANCH }}
          path: ${{ env.REPO_PWD }}
          token: ${{ secrets.GITHUB_TOKEN }}


      - name: Build cmake:${{ env.CMAKE_VERSION }} docker image
        id: build_cmake_image
        run: |
          docker build --build-arg DOCKER_OS_IMAGE="${{ env.DOCKER_OS_IMAGE }}" --build-arg CMAKE_VERSION="${{ env.CMAKE_VERSION }}" --build-arg JOBS="8" --build-arg REPO_URL="${{ env.REPO_URL }}" --build-arg REPO_NAME_TIMESTAMP="${{ env.REPO_NAME_TIMESTAMP }}" -t ${{ env.DOCKER_SOURCE_IMG }} -f cmake_gen/Dockerfile ./cmake_gen
      - name: Push cmake:${{ env.CMAKE_VERSION }} to ${{ env.DOCKER_REPO_HOST }}
        if: ${{ steps.build_cmake_image.outcome == 'success' }}
        run: |
          docker ps

          echo "Committing ${{ env.DOCKER_SOURCE_IMG }} to ${{ env.DOCKER_SOURCE_COMMIT_IMG }}"
          docker container commit ${{ env.DOCKER_SOURCE_IMG }} ${{ env.DOCKER_SOURCE_COMMIT_IMG }}

          docker rmi ${{ env.DOCKER_SOURCE_IMG }}

          echo "Tagging ${{ env.DOCKER_SOURCE_COMMIT_IMG }} for ${{ env.DOCKER_REPO_HOST }} Docker Repo"
          docker image tag ${{ env.DOCKER_SOURCE_COMMIT_IMG }} ${{ env.DOCKER_REPO_HOST }}/${{ env.DOCKER_SOURCE_COMMIT_IMG }}

          echo "Pushing ${{ env.DOCKER_REPO_HOST }}/${{ env.DOCKER_SOURCE_COMMIT_IMG }}"
          docker image push ${{ env.DOCKER_REPO_HOST }}/${{ env.DOCKER_SOURCE_COMMIT_IMG }}

          docker images

      - name: Compile source in ${{ env.DOCKER_IMG_NAME }} container
        id: compile_source_container
        run: |
          echo "Determining Compiling Container for ${{ env.REPO_CHECKOUT }}..."
          if [ "$(docker inspect -f '{{.State.Running}}' ${{ env.DOCKER_IMG_NAME }})" != "true" ]; then
            echo "${{ env.DOCKER_IMG_NAME }} Container is not running! Starting..."
            docker run -d --name ${{ env.DOCKER_IMG_NAME }} -v ${{ env.REPO_PWD }}:/${{ env.REPO_NAME_TIMESTAMP }} ${{ env.DOCKER_SOURCE_COMMIT_IMG }} tail -f /dev/null
          else
            echo "${{ env.DOCKER_IMG_NAME }} Container is running. Continuing..."
          fi

          echo "Compiling ${{ env.REPO_CHECKOUT }} in /${{ env.REPO_NAME_TIMESTAMP }}/build/"
          docker exec ${{ env.DOCKER_IMG_NAME }} bash -c "cd /${{ env.REPO_NAME_TIMESTAMP }} && mkdir build && cd build && cmake -G Ninja ${{ env.CMAKE_FLAGS }} .. && cmake --build . && cpack -G DEB"
      - name: Commit & push ${{ env.DOCKER_IMG_NAME }} container to ${{ env.DOCKER_REPO_HOST }}
        id: commit_push_compiled
        if: ${{ steps.compile_source_container.outcome == 'success' }}
        run: |
          docker ps

          echo "Committing ${{ env.DOCKER_ID }} to ${{ env.DOCKER_COMPILED_COMMIT_IMG }}"
          docker container commit ${{ env.DOCKER_ID }} ${{ env.DOCKER_COMPILED_COMMIT_IMG }}

          docker stop ${{ env.DOCKER_ID }} && docker rm ${{ env.DOCKER_ID }}

          echo "Tagging ${{ env.DOCKER_COMPILED_COMMIT_IMG }} for ${{ env.DOCKER_REPO_HOST }}"
          docker image tag ${{ env.DOCKER_COMPILED_COMMIT_IMG }} ${{ env.DOCKER_REPO_HOST }}/${{ env.DOCKER_COMPILED_COMMIT_IMG }}

          echo "Pushing ${{ env.DOCKER_REPO_HOST }}/${{ env.DOCKER_COMPILED_COMMIT_IMG }}"
          docker image push ${{ env.DOCKER_REPO_HOST }}/${{ env.DOCKER_COMPILED_COMMIT_IMG }}

          docker images

      - name: Upload packaged build as an artifact
        if: ${{ steps.commit_push_compiled.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME_TIMESTAMP }}
          path: ${{ env.REPO_PWD }}/_packages/*

      - name: Cleanup
        if: ${{ always() }}
        run:  |
          docker rmi ${{ env.DOCKER_SOURCE_COMMIT_IMG }} ${{ env.DOCKER_REPO_HOST }}/${{ env.DOCKER_SOURCE_COMMIT_IMG }}
          docker rmi ${{ env.DOCKER_COMPILED_COMMIT_IMG }} ${{ env.DOCKER_REPO_HOST }}/${{ env.DOCKER_COMPILED_COMMIT_IMG }}
          cd ${{ github.workspace }} && sudo rm -r *
