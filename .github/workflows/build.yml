name: Build, Compile & Package

on:
  workflow_dispatch:
    secrets:
      GITHUB_TOKEN:
        required: true

    inputs:
      SOURCE_CODE_URL:
        description: Source Repo URL
        required: true
        default: https://github.com/retifrav/cmake-cpack-example
      SOURCE_CODE_BRANCH:
        description: Source Repo Branch
        required: true
        default: master
      DOCKER_OS_IMAGE:
        description: Docker Image Operating System
        required: true
        type: choice
        options:
        - alpine
        - fedora
        - ubuntu
        - arch
        default: ubuntu
      DOCKER_IMG_NAME:
        description: Compiling Container Name
        required: true
        type: string
        default: cmake-cpack-example
      DOCKER_TAG:
        description: Compiling Container Tag Name
        required: true
        type: string
        default: latest
      DOCKER_CMAKE_VERSION:
        description: Container CMake Version
        required: true
        default: 3.29.6
      CMAKE_FLAGS:
        description: Additional make flags to compiler (Optional)
        required: false
        type: string

jobs:
  build:

    runs-on: ubuntu-22.o4
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set dynamic environment variables
        run: |
          ## Set version control variables
          echo "WORK_WEEK=$(date "+%yww%W.%u")" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(str="${{ github.sha }}"; echo "${str:0:7}")" >> $GITHUB_ENV
          echo "SHA=${{ github.sha }}" >> $GITHUB_ENV
          echo "REPO_URL=${{ github.event.inputs.SOURCE_CODE_URL }}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${{ github.event.inputs.SOURCE_CODE_BRANCH }}" >> $GITHUB_ENV
          echo "REPO_NAME=$(url="${{ github.event.inputs.SOURCE_CODE_URL }}"; repo=${url##*/}; echo "$repo")" >> $GITHUB_ENV
          echo "REPO_CHECKOUT=$(url="${{ github.event.inputs.SOURCE_CODE_URL }}"; url=${url#https://github.com/}; echo "${url%/}")" >> $GITHUB_ENV
          ## Set docker container variables
          echo "DOCKER_OS_IMAGE=${{ github.event.inputs.DOCKER_OS_IMAGE }}" >> $GITHUB_ENV
          echo "DOCKER_IMG_NAME=${{ github.event.inputs.DOCKER_IMG_NAME }}" >> $GITHUB_ENV
          echo "DOCKER_TAG=${{ github.event.inputs.DOCKER_TAG }}" >> $GITHUB_ENV
          ## Set CMake variables
          echo "CMAKE_VERSION=${{ github.event.inputs.DOCKER_CMAKE_VERSION }}" >> $GITHUB_ENV
          echo "CMAKE_FLAGS=${{ github.event.inputs.CMAKE_FLAGS }}" >> $GITHUB_ENV
      - name: Create a TIMESTAMP with WORK_WEEK & COMMIT_HASH variables
        run: |
          ## example: 24ww25.5_59726b5
          echo "TIMESTAMP=${{ env.WORK_WEEK }}_${{ env.COMMIT_HASH }}" >> $GITHUB_ENV
      - name: Attach TIMESTAMP to REPO_NAME
        run: |
          ## example: c-example-main_24ww24.5_59726b5
          echo "REPO_NAME_TIMESTAMP=${{ env.REPO_NAME }}-${{ env.REPO_BRANCH }}_${{ env.TIMESTAMP }}" >> $GITHUB_ENV
      - name: Set the working directory for ${{ env.REPO_CHECKOUT }}
        run: |
          echo "REPO_PWD=${{ github.workspace }}/${{ env.REPO_NAME }}" >> $GITHUB_ENV

      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Checkout ${{ env.REPO_CHECKOUT }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_CHECKOUT }}
          ref: ${{ env.REPO_BRANCH }}
          path: ${{ env.REPO_PWD }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Start debug SSH session
        uses: mxschmitt/action-tmate@v3.18
        with:
          detached: true

      - name: Build cmake:${{ env.CMAKE_VERSION }} docker image
        id: build_cmake_image
        run: |
          docker build --build-arg CMAKE_VERSION="${{ env.CMAKE_VERSION }}" --build-arg JOBS="8" --build-arg REPO_URL="${{ env.REPO_URL }}" --build-arg REPO_NAME_TIMESTAMP="${{ env.REPO_NAME_TIMESTAMP }}" -t cmake:${{ env.CMAKE_VERSION }} -f cmake_gen/Dockerfile ./cmake_gen
      - name: Push cmake:${{ env.CMAKE_VERSION }} to image repo
        if: ${{ steps.build_cmake_image.outcome == 'success' }}
        run: |
          docker images

      - name: Compile source in ${{ env.DOCKER_IMG_NAME }} container
        id: compile_source_container
        run: |
          docker run -d --name ${{ env.DOCKER_IMG_NAME }} -v ${{ env.REPO_PWD }}:/${{ env.REPO_NAME_TIMESTAMP }} cmake:${{ env.CMAKE_VERSION }} tail -f /dev/null
          docker ps

          if [ "$(docker inspect -f '{{.State.Running}}' ${{ env.DOCKER_IMG_NAME }})" != "true" ]; then
            echo "Container is not running. Starting container..."
            docker start ${{ env.DOCKER_IMG_NAME }}
          fi

          docker exec ${{ env.DOCKER_IMG_NAME }} "cd /${{ env.REPO_NAME_TIMESTAMP }} && mkdir build && cd build && cmake -G Ninja ${{ env.CMAKE_FLAGS }} -DCMAKE_BUILD_TYPE=Release .. && cmake --build . && cpack -G DEB"
      - name: Upload compiled build as an artifact
        if: ${{ steps.compile_source_container.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME_TIMESTAMP }}
          path: ${{ env.REPO_PWD }}/_packages/*

      - name: Docker Scout
        id: docker-scout
        if: ${{ steps.compile_source_container.outcome == 'success' }}
        uses: docker/scout-action@dd36f5b0295baffa006aa6623371f226cc03e506
        with:
          command: cves
          image: ${{ steps.meta.outputs.tags }}
          only-severities: critical,high
          exit-code: true

      - name: Cleanup
        if: always()
        run:  |
          docker stop ${{ env.DOCKER_IMG_NAME }}
          docker rm ${{ env.DOCKER_IMG_NAME }}
          docker rmi cmake:${{ env.CMAKE_VERSION }}
          cd ${{ github.workspace }}
          sudo rm -r *
          df -h
          ls -h
