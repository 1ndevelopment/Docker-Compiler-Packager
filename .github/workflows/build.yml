name: Build, Compile & Package

on:
  workflow_dispatch:
    secrets:
      GITHUB_TOKEN:
        required: true

    inputs:
      SOURCE_CODE_URL:
        description: Source Repo URL
        required: true
        default: https://github.com/retifrav/cmake-cpack-example
      SOURCE_CODE_BRANCH:
        description: Source Repo Branch
        required: true
        default: main
      DOCKER_OS_IMAGE:
        description: Docker Image Operating System
        required: true
        type: choice
        options:
        - alpine
        - fedora
        - ubuntu
        - arch
        default: ubuntu
      DOCKER_IMG_NAME:
        description: Compiling Container Name
        required: true
        type: string
        default: cmake-cpack-example
      DOCKER_TAG:
        description: Compiling Container Tag Name
        required: true
        type: string
        default: latest
      DOCKER_CMAKE_VERSION:
        description: Container CMake Version
        required: true
        default: 3.29.6
      DOCKER_CMAKE_FLAGS:
        description: Add additional cmake flags to container (Optional)
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set dynamic environment variables
      run: |
        ## Set version control variables
        echo "WORK_WEEK=$(date "+%yww%W.%u_%H:%M:%S")" >> $GITHUB_ENV
        echo "COMMIT_HASH=$(str="${{ github.sha }}"; echo "${str:0:7}")" >> $GITHUB_ENV
        echo "REPO_URL=${{ github.event.inputs.SOURCE_CODE_URL }}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${{ github.event.inputs.SOURCE_CODE_BRANCH }}" >> $GITHUB_ENV
        echo "REPO_NAME=$(url="${{ github.event.inputs.SOURCE_CODE_URL }}"; repo=${url##*/}; echo "$repo")" >> $GITHUB_ENV

        ## Source Code Checkout
        ## example: 1ndev-ui/c-example
        echo "CHECKOUT_REPO=$(url="${{ github.event.inputs.SOURCE_CODE_URL }}"; url=${url#https://github.com/}; echo "${url%/}")" >> $GITHUB_ENV

        ## Set docker container variables
        echo "DOCKER_OS_IMAGE=${{ github.event.inputs.DOCKER_OS_IMAGE }}" >> $GITHUB_ENV
        echo "DOCKER_IMG_NAME=${{ github.event.inputs.DOCKER_IMG_NAME }}" >> $GITHUB_ENV
        echo "DOCKER_TAG=${{ github.event.inputs.DOCKER_TAG }}" >> $GITHUB_ENV
        echo "CMAKE_VERSION=${{ github.event.inputs.DOCKER_CMAKE_VERSION }}" >> $GITHUB_ENV

    - name: Create timestamps & set the repo's working directory
      run: |
        ## Create a TIMESTAMP with the WORK_WEEK & COMMIT_HASH variables
        echo "TIMESTAMP=$(echo ${{ env.WORK_WEEK }}_${{ env.COMMIT_HASH }})" >> $GITHUB_ENV

        ## Attach the TIMESTAMP variable to the Source Code's REPO_NAME
        ## example: c-example-main_24ww25.5_13:56:38_59726b5
        echo "REPO_NAME_TIMESTAMP=$(echo ${{ env.REPO_NAME }}-${{ env.REPO_BRANCH }}_${{ env.TIMESTAMP }})" >> $GITHUB_ENV

        ## Source Code Repo Directory
        echo "REPO_PWD=${{ github.workspace }}/${{ env.REPO_NAME }}" >> $GITHUB_ENV

    - name: Self Checkout
      uses: actions/checkout@v4

    - name: Checkout Source Repo
      uses: actions/checkout@v4
      with:
        repository: ${{ env.CHECKOUT_REPO }}
        ref: ${{ env.REPO_BRANCH }}
        path: ${{ env.REPO_PWD }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate cmake:${{ env.CMAKE_VERSION }} docker image
      id: generate_cmake_docker_img
      run: |
        docker build --build-arg CMAKE_VERSION="${{ env.CMAKE_VERSION }}" --build-arg JOBS="8" -t cmake:${{ env.CMAKE_VERSION }} -f cmake_gen/Dockerfile ./cmake_gen

    - name: Push cmake:${{ env.CMAKE_VERSION }} image to repo
      if: steps.generate_cmake_docker_img.outcome == 'success'
      run: |
        docker images
        docker ps

    - name: Build source repo using the cmake:${{ env.CMAKE_VERSION }} container
      id: compile_source_container
      run: |
        docker run -d --name ${{ env.DOCKER_IMG_NAME }} -v ${{ env.REPO_PWD }}:/${{ env.REPO_NAME_TIMESTAMP }} cmake:${{ env.CMAKE_VERSION }} --entrypoint /bin/bash
        docker exec ${{ env.DOCKER_IMG_NAME }} /bin/bash -c "cd /${{ env.REPO_NAME_TIMESTAMP }} && ls"

    - name: Upload compiled build as an artifact
      if: steps.compile_source_container.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.REPO_NAME_TIMESTAMP }}
        path: ${{ env.REPO_PWD }}/build/*

    - name: Clean Up
      if: always()
      run:  |
        docker stop ${{ env.DOCKER_IMG_NAME }}
        docker rm ${{ env.DOCKER_IMG_NAME }}
        docker rmi cmake:${{ env.CMAKE_VERSION }}
        cd ${{ github.workspace }}
        sudo rm -r *
        df -h
        ls -h
